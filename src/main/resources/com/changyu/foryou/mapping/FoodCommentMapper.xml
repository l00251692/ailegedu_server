<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.changyu.foryou.mapper.FoodCommentMapper">
	<cache eviction="LRU" flushInterval="180000" size="512" readOnly="true" />
	<resultMap id="BaseResultMap" type="com.changyu.foryou.model.FoodComment">
		<result column="order_id" property="orderId" jdbcType="BIGINT" />
		<result column="campus_id" property="campusId" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="date" property="date" jdbcType="DATE" />
		<result column="service" property="service" jdbcType="SMALLINT" />
		<result column="quality" property="quality" jdbcType="SMALLINT" />
		<result column="comment" property="comment" jdbcType="VARCHAR" />
		<result column="tag" property="tag" jdbcType="SMALLINT" />
		<result column="img_url" property="imgUrl" jdbcType="VARCHAR" />	
		<result column="nickname" property="nickName" jdbcType="VARCHAR" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="orderCount" property="orderCount" jdbcType="INTEGER" />
		
		
	</resultMap>
	<insert id="insert" parameterType="com.changyu.foryou.model.FoodComment">
		insert into food_comment
		(food_id, campus_id,comment, date,
		grade, phone, tag
		)
		values
		(#{foodId,jdbcType=BIGINT},
		#{campusId,jdbcType=INTEGER},#{comment,jdbcType=VARCHAR},
		#{date,jdbcType=DATE},
		#{grade,jdbcType=SMALLINT},
		#{phone,jdbcType=VARCHAR}, #{tag,jdbcType=SMALLINT}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.changyu.foryou.model.FoodComment">
		insert into food_comment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="orderId != null">
				order_id,
			</if>
			<if test="campusId != null">
				campus_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="date != null">
				date,
			</if>
			<if test="service != null">
				service,
			</if>
			<if test="quality != null">
				quality,
			</if>
			<if test="comment != null">
				comment,
			</if>
			<if test="tag != null">
				tag,
			</if>		
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="orderId != null">
				#{orderId,jdbcType=BIGINT},
			</if>
			<if test="campusId != null">
				#{campusId,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="date != null">
				#{date,jdbcType=DATE},
			</if>
			<if test="service != null">
				#{service,jdbcType=SMALLINT},
			</if>
			<if test="quality != null">
				#{quality,jdbcType=VARCHAR},
			</if>
			<if test="comment != null">
				#{comment,jdbcType=BIGINT},
			</if>
			<if test="tag != null">
				#{tag,jdbcType=SMALLINT},
			</if>
		</trim>
	</insert>

	<select id="getCommentCountsById" resultType="Long">
		SELECT
		count(*)
		FROM
		food_comment
		WHERE
		food_id=#{foodId,jdbcType=BIGINT}
		AND tag=1
		and
		campus_id=#{campusId,jdbcType=INTEGER}
	</select>

	<select id="getCommentsById" resultMap="BaseResultMap">
		SELECT
		food_comment.food_id,
		food_comment.campus_id,
		COMMENT,
		date,
		grade,
		food_comment.phone,
		nickname,
		users.img_url,
		is_hidden,
		(
		CASE WHEN order_count is null
		THEN 1
		ELSE order_count
		END
		)order_count
		FROM
		food_comment
		LEFT JOIN users on food_comment.phone = users.phone
		left JOIN orders ON food_comment.order_id = orders.order_id
		WHERE
		food_comment.food_id = #{foodId,jdbcType=BIGINT}
		AND
		food_comment.campus_id = #{campusId,jdbcType=INTEGER}
		AND food_comment.
		COMMENT IS NOT NULL
		AND food_comment. COMMENT != ""
		AND food_comment.tag
		= 1
		<if test="limit!=null and offset !=null">
			LIMIT #{limit} OFFSET #{offset,jdbcType=INTEGER}
		</if>
	</select>

	<select id="getAllComments" resultMap="BaseResultMap" useCache="false">
		SELECT
			food_comment.order_id,
			food_comment.campus_id,
			food_comment.user_id,
			food_comment.date,
			food_comment.service,
			food_comment.quality,
			food_comment.comment,
			food_comment.tag,
			users.img_url,
			users.nickname,
			users.phone
		FROM
			food_comment
			LEFT JOIN users ON food_comment.user_id = users.user_id
		<where>
			food_comment.campus_id=#{campusId,jdbcType=VARCHAR}
			<!--<if test="search != null and search !='' ">
				and food.food_id =
				#{search,jdbcType=INTEGER}
			</if>-->
		</where>
		<if test="sort != null">
			order by ${sort}
		</if>
		<if test="sort !=null and order != null">
			${order}
		</if>
		<if test="offset != null and limit != null">
			limit #{offset,jdbcType=INTEGER} ,
			#{limit,jdbcType=INTEGER}
		</if>
	</select>

	<select id="getFoodCommentCount" resultType="Integer" useCache="false">
		SELECT
		count(*)
		FROM
		food_comment
		<where>
			comment is not null and comment !=""
			and
			campus_id=#{campusId,jdbcType=INTEGER}
			<if test="search != null and search !='' ">
				and food_id =
				#{search,jdbcType=VARCHAR}
			</if>
		</where>
	</select>

	<delete id="deleteFoodComment">
		delete
		from
		food_comment
		<where>
			food_id=#{foodId,jdbcType=BIGINT}
			and
			date_format(date,'%Y-%m-%d')=#{date,jdbcType=DATE}
			and grade=#{grade}
			and campus_id=#{campusId,jdbcType=INTEGER}
		</where>
	</delete>

	<select id="getAvageGrade" resultType="Float">
		SELECT
		AVG(grade)
		from
		food_comment
		where
		food_id=#{foodId,jdbcType=BIGINT} and
		campus_id=#{campusId,jdbcType=INTEGER}
	</select>

	<select id="calCommentCount" resultType="Integer">
		SELECT
		count(*) AS
		commentCount
		FROM
		food_comment
		WHERE
		food_id =#{foodId,jdbcType=BIGINT}
		AND campus_id =#{campusId,jdbcType=INTEGER}
		AND food_comment.tag = 1
		AND COMMENT IS NOT NULL
		AND COMMENT != ''
	</select>

</mapper>